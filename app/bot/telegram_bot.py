# app/bot/telegram_bot.py
"""
Telegram-–±–æ—Ç –¥–ª—è AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.
–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±–∏—Ä–∞—Ç—å –º–µ–∂–¥—É Yandex GPT –∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª—å—é (Ollama),
–≤–µ—Å—Ç–∏ –¥–∏–∞–ª–æ–≥, —Å–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å, —Å–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏ —Ç.–¥.
"""

# === –î–û–ë–ê–í–õ–Ø–ï–ú –ö–û–†–ï–ù–¨ –ü–†–û–ï–ö–¢–ê –í sys.path ===
# –≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π –∏–∑ app.* –∏ config.py
import sys
import os

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø ===
def get_model_emoji(model_name: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è –º–æ–¥–µ–ª–∏."""
    emoji_map = {
        'yandex_gpt': '‚òÅÔ∏è',  # –û–±–ª–∞–∫–æ –¥–ª—è Yandex GPT
        'local_llm': 'üíª'    # –ö–æ–º–ø—å—é—Ç–µ—Ä –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
    }
    return emoji_map.get(model_name, 'ü§ñ')  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–æ–±–æ—Ç

def format_response_with_model(model_display_name: str, model_name: str, response: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –º–æ–¥–µ–ª–∏ –∏ —ç–º–æ–¥–∑–∏."""
    emoji = get_model_emoji(model_name)
    return f"{emoji} *{model_display_name}*\n\n{response}"
# =================================================


# –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞.
project_root = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
if project_root not in sys.path:
    sys.path.insert(0, project_root)
# =================================================
from config import Config
# === –ò–ú–ü–û–†–¢–´ ===
import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ LLMManager –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
from config import Config
from app.services.llm_manager import LLMManager
# ===============

# === –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ===
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)
# =============================
TELEGRAM_MAX_MESSAGE_LENGTH = 4096
# === –°–û–°–¢–û–Ø–ù–ò–Ø –î–õ–Ø ConversationHandler ===
# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
SELECTING_MODEL, CHATTING, CHANGING_MODEL = range(3)
# ========================================

# === –•–†–ê–ù–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===
# –î–ª—è MVP –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å.
# {user_id: {'llm_manager': LLMManager_instance, 'model': 'yandex_gpt'/'local_llm', 'history': []}}
user_states = {}
# ======================================

# === –•–≠–ù–î–õ–ï–†–´ ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å."""
    user_id = update.effective_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ (/start).")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º LLMManager –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        config_dict = {key: getattr(Config, key) for key in dir(Config) if not key.startswith('__')}
        llm_manager = LLMManager(config_dict) # ‚úÖ –ü–µ—Ä–µ–¥–∞—ë–º –°–õ–û–í–ê–†–¨
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∏ –ø—É—Å—Ç—É—é –∏—Å—Ç–æ—Ä–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_states[user_id] = {
            'llm_manager': llm_manager,
            'model': None,
            'history': [] # –î–ª—è MVP: —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ {'role': '...', 'content': '...'}
        }
        logger.info(f"LLMManager —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è LLMManager –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await update.message.reply_text(
            "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.\n\n–í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—â–µ–Ω–∏—è:",
        reply_markup=get_model_selection_keyboard()
    )
    return CHANGING_MODEL

def get_model_selection_keyboard() -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏."""
    keyboard = [
        ['Yandex GPT (Cloud)'],
        ['Local LLM (Ollama)']
    ]
    return ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

async def select_model(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    user_id = update.effective_user.id
    text = update.message.text
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª: {text}")
    user_state = user_states.get(user_id)
    
    if not user_state or not user_state.get('llm_manager'):
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –±–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—ã—Ç–∞–ª—Å—è –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å.")
        await update.message.reply_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ù–∞—á–Ω–∏ —Å–Ω–∞—á–∞–ª–∞ —Å /start.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

    llm_manager = user_state['llm_manager']
    available_models = {m['name'] for m in llm_manager.get_available_models()}
    # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º –∏–º–µ–Ω–µ–º –º–æ–¥–µ–ª–∏
    model_map = {
        'Yandex GPT (Cloud)': 'yandex_gpt',
        'Local LLM (Ollama)': 'local_llm'
    }
    model_name = model_map.get(text)

    if not model_name:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –º–æ–¥–µ–ª—å: {text}")
        await update.message.reply_text(
            "‚ùì –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞.",
            reply_markup=get_model_selection_keyboard()
        )
        return SELECTING_MODEL

     
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –º–æ–¥–µ–ª—å
    available_models = {m['name'] for m in llm_manager.get_available_models()}
    if model_name not in available_models:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å: {model_name}")
        await update.message.reply_text(
            f"üö´ –ú–æ–¥–µ–ª—å '{text}' –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
            reply_markup=get_model_selection_keyboard()
        )
        return CHANGING_MODEL

    try:
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º LLMManager –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
        llm_manager.switch_model(model_name)
        user_state['model'] = model_name
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏ —Å–º–µ–Ω–µ –º–æ–¥–µ–ª–∏
        user_state['history'] = []
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª—Å—è –Ω–∞ –º–æ–¥–µ–ª—å: {model_name}")

    
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –º–æ–¥–µ–ª–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        model_info = next((m for m in llm_manager.get_available_models() if m['name'] == model_name), {})
        display_name = model_info.get('display_name', model_name)
        
        welcome_msg = (
            f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢—ã –≤—ã–±—Ä–∞–ª –º–æ–¥–µ–ª—å: <b>{display_name}</b>.\n\n"
            "–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã!\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/model - —Å–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å\n"
            "/reset - —Å–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é\n"
            "/help - –ø–æ–º–æ—â—å"
        )
        await update.message.reply_text(
            welcome_msg,
            parse_mode='HTML',
            reply_markup=ReplyKeyboardRemove() # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞
        )
        return CHATTING
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–æ–¥–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ —Å /start.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END


async def change_model_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ /model."""
    user_id = update.effective_user.id
    user_state = user_states.get(user_id)
    
    if not user_state or not user_state.get('llm_manager'):
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ —Å /start.")
        return ConversationHandler.END

    llm_manager = user_state.get('llm_manager')
    if not llm_manager:
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ù–∞—á–Ω–∏ —Å–Ω–∞—á–∞–ª–∞ —Å /start.")
        return ConversationHandler.END

    text = update.message.text
    model_map = {
        'Yandex GPT (Cloud)': 'yandex_gpt',
        'Local LLM (Ollama)': 'local_llm'
    }
    model_name = model_map.get(text)


    if not model_name:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –º–æ–¥–µ–ª—å: {text}")
        await update.message.reply_text(
            "‚ùì –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞.",
            reply_markup=get_model_selection_keyboard()
        )
        return CHANGING_MODEL
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –º–æ–¥–µ–ª—å
    available_models = {m['name'] for m in llm_manager.get_available_models()}
    if model_name not in available_models:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å: {model_name}")
        await update.message.reply_text(
            f"üö´ –ú–æ–¥–µ–ª—å '{text}' –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
            reply_markup=get_model_selection_keyboard()
        )
        return CHANGING_MODEL

    try:
        user_state['llm_manager'].switch_model(model_name)
        user_state['model'] = model_name
        user_state['history'] = [] # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª—Å—è –Ω–∞ –º–æ–¥–µ–ª—å: {model_name}")
        model_info = next((m for m in user_state['llm_manager'].get_available_models() if m['name'] == model_name), {})
        display_name = model_info.get('display_name', model_name)
        await update.message.reply_text(
            f"‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: <b>{display_name}</b>",
            parse_mode='HTML',
            reply_markup=ReplyKeyboardRemove()
        )
        
        return CHATTING
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –º–æ–¥–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ –≤—Ä–µ–º—è —á–∞—Ç–∞."""
    user_id = update.effective_user.id    
    user_state = user_states.get(user_id)
    user_message_text = update.message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_message_text}")
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –º–æ–¥–µ–ª—å
    if not user_state or not user_state.get('model'):
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–ª –º–æ–¥–µ–ª—å.")
        await update.message.reply_text("‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å —Å –ø–æ–º–æ—â—å—é /start.")
        return

    llm_manager = user_state['llm_manager']
    model_name = user_state['model']
    chat_history = user_state['history']

    # --- –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ø–µ—á–∞—Ç–∞–µ—Ç..." ---
    await update.message.chat.send_action("typing")
    # -------------------------------------------

    try:
        # --- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ ---
        MAX_HISTORY_PAIRS = 5 # 5 –ø–∞—Ä –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç
        recent_history = chat_history[-(MAX_HISTORY_PAIRS * 2):] if len(chat_history) > MAX_HISTORY_PAIRS * 2 else chat_history

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        chat_history.append({"role": "user", "content": user_message_text})

        # --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π ---
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ LLM ({model_name}) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å –∏—Å—Ç–æ—Ä–∏–µ–π...")
        result_dict = llm_manager.generate_response(
            prompt=user_message_text,
            chat_history=chat_history 
        )

        bot_response = result_dict.get('response', '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç.')
        model_used_final = result_dict.get('model_used', model_name)
        logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç LLM ({model_used_final}) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ–ª—É—á–µ–Ω (–¥–ª–∏–Ω–∞: {len(bot_response)} —Å–∏–º–≤–æ–ª–æ–≤).")

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
        chat_history.append({"role": "assistant", "content": bot_response})

        # === –§–û–†–ú–ê–¢–ò–†–£–ï–ú –û–¢–í–ï–¢ –° –£–ö–ê–ó–ê–ù–ò–ï–ú –ú–û–î–ï–õ–ò –ò –≠–ú–û–î–ó–ò ===
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –º–æ–¥–µ–ª–∏
        model_info = next((m for m in llm_manager.get_available_models() if m['name'] == model_used_final), {})
        display_name = model_info.get('display_name', model_used_final)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        final_response = format_response_with_model(display_name, model_used_final, bot_response)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await update.message.reply_text(final_response, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
        await update.message.reply_text(
            "üòî –ò–∑–≤–∏–Ω–∏, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–≤–æ–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑."
        )

async def model_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /model ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å."""
    user_id = update.effective_user.id
    user_state = user_states.get(user_id)
    
    if not user_state or not user_state.get('llm_manager'):
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ —Å /start.")
        return

    await update.message.reply_text(
        "üîÅ –í—ã–±–µ—Ä–∏ –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å:",
        reply_markup=get_model_selection_keyboard()
    )
    return CHANGING_MODEL
    

async def reset_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞."""
    user_id = update.effective_user.id
    user_state = user_states.get(user_id)
    
    if not user_state or not user_state.get('model'):
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å —Å –ø–æ–º–æ—â—å—é /start.")
        return

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    user_state['history'] = []
    await update.message.reply_text("üîÑ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ —Å–±—Ä–æ—à–µ–Ω–∞. –ù–∞—á–Ω–∏ –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥!")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥."""
    help_text = (
        "‚öôÔ∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "/start - –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ –∏ –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å\n"
        "/model - –°–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å\n"
        "/reset - –°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É!"
    )
    await update.message.reply_text(help_text, parse_mode='HTML')

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel. –ó–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥."""
    user_id = update.effective_user.id
    if user_id in user_states:
        del user_states[user_id]
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª –¥–∏–∞–ª–æ–≥ (/cancel).")
    await update.message.reply_text(
        "‚èπ –î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω–µ–Ω. –ù–∞—á–Ω–∏ —Å–Ω–∞—á–∞–ª–∞ —Å /start.",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

# ===================

# === –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê ===

def run_bot() -> None:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram-–±–æ—Ç–∞."""
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞...")

    # 1. –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    TOKEN = Config.TELEGRAM_BOT_TOKEN

    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ —Ç–æ–∫–µ–Ω
    if not TOKEN or not isinstance(TOKEN, str) or TOKEN.strip() == '' or 'your_telegram_bot_token_here' in TOKEN:
        logger.critical("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤ .env –∏–ª–∏ config.py")
        print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê!")
        print("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.")
        print("–ü—Ä–æ–≤–µ—Ä—å —Ñ–∞–π–ª .env –∏ config.py.")
        print("========================\n")
        return # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏

    logger.info("TELEGRAM_BOT_TOKEN –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ.")

    # 3. –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞
    try:
        application = Application.builder().token(TOKEN).build()
        logger.info("Application (ApplicationBuilder) —Å–æ–∑–¥–∞–Ω–æ.")
    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Application: {e}")
        print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê!")
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞: {e}")
        print("========================\n")
        return

    # 4. –û–ø—Ä–µ–¥–µ–ª—è–µ–º ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            SELECTING_MODEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_model)],
            CHATTING: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message),
                CommandHandler('model', model_command),
                CommandHandler('reset', reset_command),
                CommandHandler('help', help_command),
            ],
            CHANGING_MODEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, change_model_command)]

        },
        fallbacks=[CommandHandler('cancel', cancel)],
        
    )

    # 5. –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application.add_handler(conv_handler)
    # –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (—Ä–∞–±–æ—Ç–∞—é—Ç –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏)
    application.add_handler(CommandHandler('model', model_command))
    application.add_handler(CommandHandler('reset', reset_command))
    application.add_handler(CommandHandler('help', help_command))
    application.add_handler(CommandHandler('cancel', cancel)) # –î–æ–±–∞–≤–ª—è–µ–º /cancel –≤–Ω–µ ConversationHandler —Ç–æ–∂–µ
    
    # 6. –ó–∞–ø—É—Å–∫–∞–µ–º polling
    logger.info("Telegram –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É polling...")
    print("\nü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

# =======================

# === –¢–û–ß–ö–ê –í–•–û–î–ê –î–õ–Ø –°–ö–†–ò–ü–¢–ê ===
# –ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é: python app/bot/telegram_bot.py
if __name__ == '__main__':
    run_bot()
# =================================